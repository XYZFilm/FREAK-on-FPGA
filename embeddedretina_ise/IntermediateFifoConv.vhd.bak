--------------------------------------------------------------------------------
-- Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
--------------------------------------------------------------------------------
--   ____  ____ 
--  /   /\/   / 
-- /___/  \  /    Vendor: Xilinx 
-- \   \   \/     Version : 14.6
--  \   \         Application : 
--  /   /         Filename : xil_F8MKfI
-- /___/   /\     Timestamp : 04/05/2014 20:58:17
-- \   \  /  \ 
--  \___\/\___\ 
--
--Command: 
--Design Name: 
--

library ieee;
use ieee.std_logic_1164.ALL;
use ieee.numeric_std.ALL;
library UNISIM;
use UNISIM.Vcomponents.ALL;
use work.RetinaParameters.ALL;
entity IntermediateFifoConv is
   port ( clk        : in    std_logic;  
          rst        : in    std_logic;
          enableIn   : in    std_logic;
	  inputValue : in    std_logic_vector (OUT_VERT_CONV_BW-1 downto 0);
          enableOut  : out   std_logic;
          outputData : out   std_logic_vector (OUT_VERT_CONV_BW-1 downto 0)
	);
end IntermediateFifoConv;

architecture BEHAVIORAL of IntermediateFifoConv is
	type T_SCALE_VALUES_FIFO is array (NUMBER_OF_SCALES-1 downto 0) of std_logic_vector(OUT_VERT_CONV_BW-1 downto 0);
	signal intermediate_fifo: T_SCALE_VALUES_FIFO;
	signal sCounter: std_logic;
	--signal sCounter: integer range 0 to NUMBER_OF_SCALES-1;
	--signal sEnableOut: std_logic;
begin
proceso1: process(clk)
begin
	if rising_edge(clk) then
		if rst = '1' then
			intermediate_fifo <= (others => (others => '0'));
			--sEnableOut <= '0';
			sCounter <= '0';
			enableOut <= '0';			
		elsif enableIn = '1' then
			intermediate_fifo(0) <= inputValue;
			intermediate_fifo(1) <= intermediate_fifo(0);
			-------WORKS ONLY FOR NUMBER_OF_SCALES > 2  !!!!!!!!!
			--loop1: for i in 1 to NUMBER_OF_SCALES-1 loop
			  --  intermediate_fifo(i) <= intermediate_fifo(i-1);
			--end loop;
			--if sCounter = NUMBER_OF_SCALES-1 then
			--	sCounter <= 0;
			--	sEnableOut <= '1';
			--else
			--	sEnableOut <= '0';
			--	sCounter <= sCounter +1;
			--end if;
			------------------------------------------------------					        
		end if;
		sCounter <= enableIn;
                enableOut <= sCounter;
   end if;--end if rising_edge(clk)
end process proceso1;
outputData <= intermediate_fifo(NUMBER_OF_SCALES-1);

end BEHAVIORAL;


