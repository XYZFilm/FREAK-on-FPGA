--------------------------------------------------------------------------------
-- Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
--------------------------------------------------------------------------------
--   ____  ____ 
--  /   /\/   / 
-- /___/  \  /    Vendor: Xilinx 
-- \   \   \/     Version : 14.6
--  \   \         Application : 
--  /   /         Filename : xil_F8MKfI
-- /___/   /\     Timestamp : 04/05/2014 20:58:17
-- \   \  /  \ 
--  \___\/\___\ 
--
--Command: 
--Design Name: 
--

library ieee;
use ieee.std_logic_1164.ALL;
use ieee.numeric_std.ALL;
library UNISIM;
use UNISIM.Vcomponents.ALL;
use work.RetinaParameters.ALL;
entity IntermediateBufferConv is
   port ( clk        : in    std_logic; 
          enableIn   : in    std_logic; 
          inputValue : in    std_logic_vector (OUT_VERT_CONV_BW-1 downto 0); 
          rst        : in    std_logic; 
          enableOut  : out   std_logic; 
          outputData : out   T_INPUT_HORIZONTAL_CONVOLUTION
	);
end IntermediateBufferConv;

architecture BEHAVIORAL of IntermediateBufferConv is
	--type T_SCALE_VALUES_FIFO is array std_logic_vector(NUMBER_OF_SCALES-1 downto 0) of std_logic_vector(OUT_VERT_CONV_BW-1 downto 0);
	component IntermediateFifoConv
		port (  clk        : in std_logic;  
			rst        : in std_logic;
			enableIn   : in std_logic;
			inputValue : in    std_logic_vector (OUT_VERT_CONV_BW-1 downto 0);
			enableOut  : out   std_logic;
			outputData : out   std_logic_vector (OUT_VERT_CONV_BW-1 downto 0)
		);
	end component;
	signal outputArray: T_INPUT_HORIZONTAL_CONVOLUTION;
	signal enableOutArray: std_logic_vector(KERNEL_SIZE-1 downto 0);
	signal counter1: integer range 0 to (KERNEL_SIZE-1) := 0;
	signal counter2: std_logic;
	--signal counter2: integer range 0 to (NUMBER_OF_SCALES-1) := 0;
begin
	fifo0: IntermediateFifoConv
	port map(
		clk => clk,
		rst => rst,
		enableIn => enableIn,
		inputValue => inputValue,
		enableOut => enableOutArray(0),
		outputData => outputArray(0)
	);
	gfifo: for i in 1 to KERNEL_SIZE-1 generate
		fifoX: IntermediateFifoConv
		port map(
			clk => clk,
			rst => rst,
			enableIn => enableOutArray(i-1),
			inputValue => outputArray(i-1),
			enableOut => enableOutArray(i),
			outputData => outputArray(i)
		);
	end generate gfifo;

proceso1: process(clk)
begin
	if rising_edge(clk) then
		if rst = '1' then
			--outputArray <= (others => (others => '0'));
			counter1 <= 0;
			--counter2 <= 0;
			counter2 <= '0';
			enableOut <= '0';  
		elsif enableIn = '1' then
			if counter1 = (KERNEL_SIZE*NUMBER_OF_SCALES)-1 then
				-------WORKS ONLY FOR NUMBER_OF_SCALES > 2  !!!!!!!!!
				--if counter2 = (NUMBER_OF_SCALES-1) then
				--	counter1 <= 0;
				--	counter2 <= 0;
				--	enableOut <= '0';
				--else
				--	counter2 <= counter2+1;
				--	enableOut <= '1';
				--end if;				
				if counter2 = '1' then
				        counter1 <= 0;
				        counter2 <= NOT enableIn;
				else
				        counter2 <= enableIn;	
				end if;
				enableOut <= NOT counter2;
			else
			        counter2 <= '0';
				counter1 <= counter1 +1;
				enableOut <= '0';
			end if;	
		end if;
   end if;--end if rising_edge(clk)
end process proceso1;
outputData <= outputArray;
end BEHAVIORAL;


